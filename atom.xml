<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>美男子</title>
  
  <subtitle>Hello World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-11T10:46:05.421Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Andy Xic</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一道有意思的js面试题</title>
    <link href="http://yoursite.com/2018/03/11/%E4%B8%80%E9%81%93%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/03/11/一道有意思的js面试题/</id>
    <published>2018-03-11T10:45:34.000Z</published>
    <updated>2018-03-11T10:46:05.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一道有意思的js面试题"><a href="#一道有意思的js面试题" class="headerlink" title="一道有意思的js面试题"></a>一道有意思的js面试题</h1><p>这几天忙着面试，遇到了一个有意思的面试题，记录一下，就当复习自己的js基础了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">1</span>); &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">2</span>);&#125;;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">3</span>);&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">4</span>);&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; alert (<span class="number">5</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请写出以下输出结果：</span></span><br><span class="line">Foo.getName();</span><br><span class="line">getName();</span><br><span class="line">Foo().getName();</span><br><span class="line">getName();</span><br><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//答案：</span></span><br><span class="line">Foo.getName();<span class="comment">//2</span></span><br><span class="line">getName();<span class="comment">//4</span></span><br><span class="line">Foo().getName();<span class="comment">//1</span></span><br><span class="line">getName();<span class="comment">//1</span></span><br><span class="line"><span class="keyword">new</span> Foo.getName();<span class="comment">//2</span></span><br><span class="line"><span class="keyword">new</span> Foo().getName();<span class="comment">//3</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ol><li>首先定义了一个叫Foo的函数，之后为Foo创建了一个叫getName的<strong>静态属性</strong>存储了一个匿名函数，之后为Foo的<strong>原型对象</strong>新创建了一个叫getName的匿名函数。之后又通过<strong>函数变量表达式</strong>创建了一个getName的函数，最后再<strong>声明</strong>一个叫getName函数。第一问的 Foo.getName 自然是访问Foo函数上存储的静态属性，输出为2</li><li>直接调用 getName 函数。既然是直接调用那么就是访问当前上文作用域内的叫getName的函数，所以跟1 2 3都没什么关系。首先函数声明式以及变量声明会提升到顶部，当程序运行到赋值语句时，将覆盖getName函数声明，最终输出为4</li><li>运行Foo(),将全局变量getName重新赋值，返回this对象，由于当前调用上下文在全局。所以优先在全局查找getName属性，由于在函数内部修改了全局变量，所以最终输出为1</li><li>同理。由于已经改写getName，所以输出为1</li><li>.运算符优先于new运算符，所以先执行FOO.getName(),然后将该函数当成构造函数去实例化，所以最终输出为2</li><li>将FOO作为构造函数实例化，再去调用函数，优先查找函数内部属性，再向上去原型中查找，所以执行prototype中的方法，最终输出3</li><li>相当于5，6结合，将实例化对象作为构造函数创建实例对象，将在原型中层层寻找方法。最终输出3</li></ol><p>另外在网上找到关于5.6.7问题的详细解析：</p><blockquote><p>new Foo.getName(); 和 new Foo().getName(); 的区别在于</p><p>new Foo 结合属于 new 无参数列表的情况（17级）</p><p>new Foo() 结合属于 new 有参数列表的情况（18级）</p><p>成员访问运算符（.）优先级为 18 级，和 new Foo() 同级</p><p>对于同级运算符，按照从左到右的顺序依次计算</p><p>所以先执行 new Foo() 返回一个 Foo 的对象 ，对 Foo 对象调用 getName 时查找引用链，得到 Foo.prototype.getName</p><p>new Foo 结合被判定为无参数列表的new，优先级低于成员访问，所以先执行成员访问得到 Foo 的属性 getName， 然后 Foo.getName 和 new 结合，执行带参数列表的 new 运算</p><p>需要注意的是带参数列表的 new …(…) 看起来像是 new 后面跟了一个函数调用，但在判断运算符优先级时 new 运算是一个整体，不能把它分开</p><p>javascript 中设定带参数列表 new 的优先级高于函数调用，那么在满足带参数列表的 new 运算符时，就不存在函数调用了虽然带参数列表的 new 运算也会执行函数调用，但是在判断运算时不把 new 和 …(…) 分开。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一道有意思的js面试题&quot;&gt;&lt;a href=&quot;#一道有意思的js面试题&quot; class=&quot;headerlink&quot; title=&quot;一道有意思的js面试题&quot;&gt;&lt;/a&gt;一道有意思的js面试题&lt;/h1&gt;&lt;p&gt;这几天忙着面试，遇到了一个有意思的面试题，记录一下，就当复习自己的j
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js实现拖拽</title>
    <link href="http://yoursite.com/2018/03/07/js%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD/"/>
    <id>http://yoursite.com/2018/03/07/js实现拖拽/</id>
    <published>2018-03-07T14:13:28.000Z</published>
    <updated>2018-03-07T14:45:37.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js实现元素拖拽效果"><a href="#js实现元素拖拽效果" class="headerlink" title="js实现元素拖拽效果"></a>js实现元素拖拽效果</h1><p>项目中写过不少鼠标拖拽事件，最近面试的时候要求实现一道元素拖拽效果，正所谓talk is cheap show me code，那就在写一个记录一下拖拽的实现及思路吧。</p><h3 id="拖拽思路"><a href="#拖拽思路" class="headerlink" title="拖拽思路"></a>拖拽思路</h3><ol><li>拖拽目标必须为已定位元素</li><li>获取拖拽目标当前坐标点</li><li>监听鼠标mousedown事件,读取当前鼠标坐标</li><li>监听鼠标mouseover事件，读取当前鼠标滑动坐标</li><li>测算鼠标移动距离，设置拖拽元素移动距离</li><li>监听鼠标mouseup事件，暂停响应鼠标移动事件</li></ol><h3 id="拖拽实现"><a href="#拖拽实现" class="headerlink" title="拖拽实现"></a>拖拽实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"drag"</span> <span class="attr">style</span>=<span class="string">"position:relative;width:100px;height:100px"</span>&gt;</span></span><br><span class="line">       拖拽目标</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义绑定事件函数</span></span><br><span class="line"><span class="keyword">var</span> bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params">target,event,fn</span>)</span>&#123;</span><br><span class="line">    target.addEventListener(event,fn)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取监听元素</span></span><br><span class="line"><span class="keyword">var</span> drag_target = <span class="built_in">document</span>.getElementById(<span class="string">"drag"</span>)</span><br><span class="line"><span class="comment">//定义拖动所需变量</span></span><br><span class="line"><span class="keyword">var</span> offset_X,</span><br><span class="line">    offset_Y,</span><br><span class="line">    isMove = <span class="literal">false</span></span><br><span class="line"><span class="comment">//绑定所需监听事件</span></span><br><span class="line"><span class="comment">//鼠标按下事件需要绑定在当前拖动元素上，监听鼠标滑动及抬起事件需绑定在document上</span></span><br><span class="line">bindEvent(drag_target,<span class="string">"mousedown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target_X = e.target.offsetLeft</span><br><span class="line">  <span class="keyword">var</span> target_Y = e.target.offsetTop</span><br><span class="line">  offset_X = e.pageX - target_X;</span><br><span class="line">  offset_Y = e.pageY - target_Y;</span><br><span class="line">  isMove = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">bindEvent(<span class="built_in">document</span>,<span class="string">"mouseover"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isMove)&#123;</span><br><span class="line">        drag_target.style.top = e.pageY - offsetX + <span class="string">"px"</span>;</span><br><span class="line">        drag_target.style.left = e.pageX - offsetY + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">bindEvent(<span class="built_in">document</span>,<span class="string">'mouseup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        isMove = <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过对元素事件绑定，获取当前元素偏移量，获取当前鼠标在元素内的坐标点，计算出当前鼠标到元素之间的距离，监听滑动事件，计算出当前元素需要偏移的距离，设置元素偏移量。当鼠标抬起，改变默认变量，取消对元素坐标的改变。由于IE浏览器没有pageX属性。需要获取鼠标当前坐标变为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = e.clientX + <span class="built_in">document</span>.body.scrollLeft - <span class="built_in">document</span>.body.clientLeft;</span><br><span class="line">    y = e.clientY + <span class="built_in">document</span>.body.scrollTop - <span class="built_in">document</span>.body.clientTop;</span><br></pre></td></tr></table></figure><p>到此为止，简单的拖拽事件完成，新的H5实现了拖拽的API，可以更好的监听元素拖拽事件，本代码只是简单的实现了JavaScript拖拽元素事件，并未考虑浏览器兼容问题及性能优化，具体效果还需要多加修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js实现元素拖拽效果&quot;&gt;&lt;a href=&quot;#js实现元素拖拽效果&quot; class=&quot;headerlink&quot; title=&quot;js实现元素拖拽效果&quot;&gt;&lt;/a&gt;js实现元素拖拽效果&lt;/h1&gt;&lt;p&gt;项目中写过不少鼠标拖拽事件，最近面试的时候要求实现一道元素拖拽效果，正所谓t
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>create project-cli</title>
    <link href="http://yoursite.com/2018/03/04/create-project-cli/"/>
    <id>http://yoursite.com/2018/03/04/create-project-cli/</id>
    <published>2018-03-04T07:24:05.000Z</published>
    <updated>2018-03-04T07:30:40.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自建脚手架"><a href="#自建脚手架" class="headerlink" title="自建脚手架"></a>自建脚手架</h1><p>最近在捣鼓vue，觉得vue-cli这个脚手架不错，想来就自己也写一个吧，正好平时工作或者自己整个啥项目，也不用苦哈哈的敲命令了，毕竟程序员的捣鼓事情的最初想法就是因为懒嘛，废话不说，说干就干</p><p>打开百度，搜索了一下脚手架搭建，文章还真不少，看来跟我一样懒得同志不在少数，总结了几篇文章，得出个基本思路。</p><ol><li>基于本地文件生成模板，通过复制本地现有的模板自动搭建新项目</li><li>基于git仓库下载生成模板，通过下载git仓库中已有模板，生成本地模板</li></ol><p>基于想开发的脚手架本身就是为了方便工作的，所以选择利用git仓库来生成模板这一模式来开发</p><h3 id="使用的npm包"><a href="#使用的npm包" class="headerlink" title="使用的npm包"></a>使用的npm包</h3><ol><li>commander: Tj大神开发的命令行工具，可以简化命令行操作，可开发类似help，init，add等命令参数的调用</li><li>chalk: 命令行输出美化工具，也就是把文字美化一下</li><li>inquirer: 交互式命令行工具，yoeman就是用他开发的，可以实现模板筛选，</li><li>metalsmith: 静态模板生成器，不过这个版本没用到，看vue里面有用</li><li>download-git-repo: git仓库下载包，很方便将仓库项目下载到本地</li></ol><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p><img src="construction.png" alt=""></p><ol><li>bin: 程序入口文件夹</li><li>lib : 程序主逻辑文件夹</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自建脚手架&quot;&gt;&lt;a href=&quot;#自建脚手架&quot; class=&quot;headerlink&quot; title=&quot;自建脚手架&quot;&gt;&lt;/a&gt;自建脚手架&lt;/h1&gt;&lt;p&gt;最近在捣鼓vue，觉得vue-cli这个脚手架不错，想来就自己也写一个吧，正好平时工作或者自己整个啥项目，也不用苦哈
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新博客开张</title>
    <link href="http://yoursite.com/2018/03/04/%E6%96%B0%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%BC%A0/"/>
    <id>http://yoursite.com/2018/03/04/新博客开张/</id>
    <published>2018-03-04T06:41:27.000Z</published>
    <updated>2018-03-04T07:34:45.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新博客开张啦"><a href="#新博客开张啦" class="headerlink" title="新博客开张啦"></a>新博客开张啦</h1><p>自从服务器中间一度停止续费，我的博客也正式下架了，前段时间一直想把之前做个博客系统新写一版，这段时间也算是完成了一点，前端当然是用的目前最火热的三大框架之Vue，后端也是我的最爱大python，不过目前博客还在搭建中，心想着怎么也得弄个博客，没事写写文章啥的，于是就有了这个博客的诞生</p><p>ps:本人技术渣，颜值低，博客只为巩固知识，记录新奇想法，如果您一不小心搜到此博客，发现博客太水，对不起，关我屁事？:)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新博客开张啦&quot;&gt;&lt;a href=&quot;#新博客开张啦&quot; class=&quot;headerlink&quot; title=&quot;新博客开张啦&quot;&gt;&lt;/a&gt;新博客开张啦&lt;/h1&gt;&lt;p&gt;自从服务器中间一度停止续费，我的博客也正式下架了，前段时间一直想把之前做个博客系统新写一版，这段时间也算是
      
    
    </summary>
    
    
  </entry>
  
</feed>
